<?php


namespace App\BulkCommissionCalculator;


use Carbon\Carbon;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class CurrencyConverter
{
    private $from_currency;
    private $to_currency;
    private $date;
    private $amount;
    private $conversion_rate = [];

    /**
     * @param string $from_currency
     * @return CurrencyConverter
     */
    public function setFromCurrency(string $from_currency): CurrencyConverter
    {
        $this->from_currency = $from_currency;
        return $this;
    }

    /**
     * @param string $to_currency
     * @return CurrencyConverter
     */
    public function setToCurrency(string $to_currency): CurrencyConverter
    {
        $this->to_currency = $to_currency;
        return $this;
    }

    /**
     * @param mixed $date
     * @return CurrencyConverter
     */
    public function setDate($date): CurrencyConverter
    {
        $this->date = $date;
        return $this;
    }

    /**
     * @param mixed $amount
     * @return CurrencyConverter
     */
    public function setAmount($amount): CurrencyConverter
    {
        $this->amount = $amount;
        return $this;
    }

    public function convert(float $amount = null, string $from_currency = null, string $to_currency = null, string $date = null)
    {
        $this->mapInputs($amount, $from_currency, $to_currency, $date);
        $conversion_rate = $this->getConversionRate();

        if (is_float($conversion_rate)) {
            return [
                'from_currency' => $this->from_currency,
                'to_currency'   => $this->to_currency,
                'from_amount'   => (float) $this->amount,
                'to_amount'     => (float) $this->amount * $conversion_rate
            ];
        }
        throw new \Exception($conversion_rate['error_message']);
    }

    private function mapInputs(
        $amount = null,
        $from_currency = null,
        $to_currency = null,
        $date = null
    )
    {
        if ($amount === null && $this->amount === null) {
            throw new \Exception("Amount Not Found To Convert");
        }

        if ($from_currency === null && $this->from_currency === null) {
            throw new \Exception("No Base Currency Found To Convert");
        }

        if ($to_currency === null && $this->to_currency === null) {
            throw new \Exception("No Destination Currency Found To Convert");
        }

        if ($date === null && $this->date === null) {
            $this->date = Carbon::today()->toDateString();
        }

        $this->amount = $amount === null ? $this->amount : $amount;
        $this->from_currency = $from_currency === null ? $this->from_currency : $from_currency;
        $this->to_currency = $to_currency === null ? $this->to_currency : $to_currency;
        $this->date = $date === null ? $this->date : $date;
    }

    public function getConversionRate()
    {
        try {

            if (isset($this->conversion_rate[$this->generateCurrencyKey()])) {
                $json_response = $this->conversion_rate[$this->generateCurrencyKey()];
                if ($this->from_currency === 'EUR') {
                    return (float) $json_response['rates'][$this->to_currency];
                } else {
                    return 1.00 / (float) $json_response['rates'][$this->from_currency];
                }
            }
            $response = Http::get($this->getApiEndpoint());

            if ($response->clientError()) {
                return [
                    'error'         => 1,
                    'error_message' => "Currency Conversion Http Client Error"
                ];
            }

            if ($response->serverError()) {
                return [
                    'error'         => 1,
                    'error_message' => "Currency Conversion Server Error"
                ];
            }

            if ($response->failed()) {
                return [
                    'error'         => 1,
                    'error_message' => "Currency Conversion Failed"
                ];
            }

            if ($response->successful()) {
                $json_response = $response->json();

                if ($json_response['success'] === true) {
                    $this->conversion_rate[$this->generateCurrencyKey()] = $json_response;

                    // This line is hardcoded because our existing plan only support one currency support
                    $this->conversion_rate[$this->generateCurrencyKey()]['rates'][$this->from_currency] = 1.00;

                    if ($this->from_currency === 'EUR') {
                        return (float) $json_response['rates'][$this->to_currency];
                    } else {
                        return (float) 1.00 / $json_response['rates'][$this->from_currency];
                    }

                } else {

                    // For all the errors generated by API EXCHANGE END
                    $error_message = $json_response['error']['type'] . ' ERROR in API EXCHANGE';
                    return [
                        'error'         => 1,
                        'error_message' => $error_message
                    ];
                }
            }
        } catch (\Exception $exception) {
            Log::error($exception);
            return [
                'error'         => 1,
                'error_message' => $exception->getMessage()
            ];
        }
    }

    private function generateCurrencyKey(): string
    {
        return $this->date;
    }

    private function getApiEndpoint(): string
    {
        // Base Currency Had to Change for Subscription Issue
        // '?base='. $this->from_currency .

        return config('url.currency_conversion_base_url'). $this->date .  '?access_key=' . config('commission.currency_exchange.access_key');
    }
}
